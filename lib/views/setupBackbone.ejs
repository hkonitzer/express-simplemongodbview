<script>
var socket = io.connect();
socket.on('connect', function () {      
       
});
var schemas = new SchemaCollection();
var collections = new C_<%=view%>View({
  model: schemas, 
  socket: socket,
  el: $('#menu'), 
  menuElem: $('<ul id="collectionList"></ul>'),
  workbenchElem: $('#workbench')
});
var temp = null;
<% 
for (var m in models) {
  
  %>
  var temp = new SchemaModel({modelName: '<%=models[m].modelName%>', keys: [], properties: [] });
  <%
  var keyArray = [];
  for (var property in models[m].schema.tree) {
    keyArray.push(property);
    var propertyConfig = models[m].schema.tree[property];
    var propertySchemaType = null;
    var propertyhasFieldIndex = false;
    if (propertyConfig instanceof Function === true) { // simple schema type
      propertySchemaType = propertyConfig.toString().substring(9, propertyConfig.toString().indexOf('('));           
    } else if (propertyConfig.type instanceof Function === true) { // configured schema type
      propertySchemaType = propertyConfig.type.toString().substring(9, propertyConfig.type.toString().indexOf('('));      
      if (propertyConfig.index) propertyhasFieldIndex = propertyConfig.index;            
    } else {  // arrays and objects            
      if (propertyConfig instanceof Array) {              
        propertySchemaType = propertyConfig.toString().substring(9, propertyConfig.toString().indexOf('(')) + 'Array';              
      } else continue;// id field as [object Object]
    }
    if (propertySchemaType === null) propertySchemaType = 'unknown';
    %>
    temp.get('keys').push('<%=property%>');    
    temp.get('properties').push({property: '<%=property%>', type: '<%=propertySchemaType %>' , index: <%=propertyhasFieldIndex%>});
    <%
  }
  %>
  var <%=models[m].modelName%>DataModel = Backbone.Model.extend({    
    <%
    for (var k = 0, kx = keyArray.length; k < kx; ++k) {
    %>
      <%=keyArray[k]%> : null<% if (k < kx-1) { %>,<%}%>
    <%
    }
    %>
  }, { idAttribute: '_id' });  
  temp.set('dataCollection', new DataCollection([], { model: <%=models[m].modelName%>DataModel, url: '/api/db/<%=models[m].modelName%>' }));
  schemas.add(temp);
  <%
} 
%>
collections.render();
</script>

